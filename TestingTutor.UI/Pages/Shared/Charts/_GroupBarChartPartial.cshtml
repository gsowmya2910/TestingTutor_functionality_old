@using Newtonsoft.Json
@model UI.DataVisuals.GroupBarChart

<script type="text/javascript">
    var model = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model))');
    var id = '#'.concat(model.Id);
    var values = model.Values;
    var colors = model.Colors;
    var groups = model.Groups;
    var subgroups = model.SubGroups;
    var minimum = model.Minimum;
    var maximum = model.Maximum;

    var $container = $(id),
        margin = { top: 30, right: 30, bottom: 30, left: 40 },
        width = $container.width() - margin.left - margin.right,
        height = $container.height() - margin.top - margin.bottom;

    var x = d3.scaleBand()
        .range([0, width])
        .domain(groups)
        .padding(0.1);


    var y = d3.scaleLinear()
        .domain([minimum, maximum])
        .range([height, 0]);

    console.log(values);

    var svg = d3.select(id)
        .append('svg')
        .attr('width', width + margin.left + margin.right + 'px')
        .attr('height', height + margin.top + margin.bottom + 'px')
        .attr('viewBox', '0 0 ' + (width + margin.left + margin.right) + ' ' + (height + margin.top + margin.bottom))
        .attr('preserveAspectRatio', 'xMidYMax meet')
        .append('g')
        .attr('transform',
            'translate(' + margin.left + ',' + margin.top + ')');

    svg.append('g')
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x));
    svg.append('g')
        .call(d3.axisLeft(y));;

    var xSub = d3.scaleBand()
        .domain(subgroups)
        .range([0, x.bandwidth()])
        .padding([0.05]);

    var data = d3.entries(values);

    svg.append('g')
        .selectAll('g')
        .data(data)
        .enter()
        .append('g')
        .attr('transform', function(d,i) {
            return "translate(" + x(groups[i]) + ",0)";
        })
        .selectAll('rect')
        .data(function (d) {
            return subgroups.map(function (key,i) {
                return { value: d.value[i], key: key }
            });
        })
        .enter()
        .append('rect')
        .attr('x', function (d, i) {
            return xSub(d.key);
        })
        .attr('y', function(d, i) {
            return y(d.value);
        })
        .attr('width', xSub.bandwidth())
        .attr('height', function(d,i) {
            return height - y(d.value);
        })
        .attr('fill', function(d, i) {
            return colors[i];
        });


</script>