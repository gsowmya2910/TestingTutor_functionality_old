// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestingTutor.Dev.Data.DataAccess;
using TestingTutor.Dev.Data.Models;

namespace TestingTutor.Dev.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.AbstractSyntaxTreeMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Deletions");

                    b.Property<int>("Insertations");

                    b.Property<int>("Rotations");

                    b.HasKey("Id");

                    b.ToTable("AbstractSyntaxTreeMetrics");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.ApplicationMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ApplicationModes");

                    b.HasData(
                        new { Id = 1, Name = "Learning Mode" },
                        new { Id = 2, Name = "Development Mode" }
                    );
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<int>("InstitutionId");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignmentSpecificationId");

                    b.Property<int>("AssignmentVisibilityProtectionLevelId");

                    b.Property<int?>("CourseId");

                    b.Property<int?>("DifficultyId");

                    b.Property<int>("FeedbackLevelOptionId");

                    b.Property<int>("InstitutionId");

                    b.Property<int>("LanguageId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<double>("RedundantTestLevel");

                    b.Property<int>("ReferenceSolutionId");

                    b.Property<int>("ReferenceTestCasesSolutionsId");

                    b.Property<double>("TestCoverageLevel");

                    b.Property<int>("TestingTypeOptionId");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentSpecificationId");

                    b.HasIndex("AssignmentVisibilityProtectionLevelId");

                    b.HasIndex("CourseId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("FeedbackLevelOptionId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ReferenceSolutionId");

                    b.HasIndex("ReferenceTestCasesSolutionsId");

                    b.HasIndex("TestingTypeOptionId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.AssignmentApplicationMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationModeId");

                    b.Property<int>("AssignmentId");

                    b.Property<bool>("IsChecked");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationModeId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("AssignmentApplicationModes");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.AssignmentCoverageTypeOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignmentId");

                    b.Property<int>("CoverageTypeOptionId");

                    b.Property<bool>("IsChecked");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("CoverageTypeOptionId");

                    b.ToTable("AssignmentCoverageTypeOption");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.AssignmentSolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Files");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("AssignmentSolutions");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.AssignmentSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("FileBytes")
                        .IsRequired();

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("AssignmentSpecifications");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.AssignmentTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignmentId");

                    b.Property<int>("TagId");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("TagId");

                    b.ToTable("AssignmentTag");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.AssignmentVisibilityProtectionLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("AssignmentVisibilityProtectionLevels");

                    b.HasData(
                        new { Id = 1, Description = "The assignment can only be used by the instructor", Name = "Private" },
                        new { Id = 2, Description = "The assignment can be used by any instructor belonging to the same organization", Name = "Organization-Only" },
                        new { Id = 3, Description = "The assignment can be used by any instructor from any organization", Name = "Repository" }
                    );
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.BagOfWordsMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Difference");

                    b.HasKey("Id");

                    b.ToTable("BagOfWordsMetrics");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.ClassCoverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Container")
                        .IsRequired();

                    b.Property<int?>("FeedbackId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.ToTable("ClassCoverage");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.CodeAnalysisMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AbstractSyntaxTreeMetricId");

                    b.Property<int>("BagOfWordsMertricId");

                    b.Property<int?>("BagOfWordsMetricId");

                    b.HasKey("Id");

                    b.HasIndex("AbstractSyntaxTreeMetricId");

                    b.HasIndex("BagOfWordsMetricId");

                    b.ToTable("CodeAnalysisMetrics");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseName")
                        .IsRequired();

                    b.Property<int>("InstitutionId");

                    b.Property<bool>("IsArchived");

                    b.Property<bool>("IsPublished");

                    b.Property<int>("TermId");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("TermId");

                    b.ToTable("Courses");

                    b.HasData(
                        new { Id = 1, CourseName = "CST 236", InstitutionId = 1, IsArchived = false, IsPublished = false, TermId = 1 },
                        new { Id = 2, CourseName = "CST 211", InstitutionId = 1, IsArchived = false, IsPublished = false, TermId = 2 }
                    );
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.CourseClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Course")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Term")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("CourseClasses");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.CoverageTypeOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("CoverageTypeOptions");

                    b.HasData(
                        new { Id = 1, Name = "Statement" },
                        new { Id = 2, Name = "Branch" },
                        new { Id = 3, Name = "Condition" }
                    );
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.DevAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignmentSolutionId");

                    b.Property<int>("CourseClassId");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("TestProjectId");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentSolutionId");

                    b.HasIndex("CourseClassId");

                    b.HasIndex("TestProjectId");

                    b.ToTable("DevAssignments");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.Difficulty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Difficulties");

                    b.HasData(
                        new { Id = 1, Value = "Easy" },
                        new { Id = 2, Value = "Medium" },
                        new { Id = 3, Value = "Hard" }
                    );
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.EngineException", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("From");

                    b.Property<string>("Phase");

                    b.Property<string>("Report");

                    b.HasKey("Id");

                    b.ToTable("EngineException");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EngineExceptionId");

                    b.HasKey("Id");

                    b.HasIndex("EngineExceptionId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.FeedbackLevelOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("FeedbackLevelOptions");

                    b.HasData(
                        new { Id = 1, Name = "Conceptual Feedback" },
                        new { Id = 2, Name = "Detailed Feedback" },
                        new { Id = 3, Name = "No Feedback" },
                        new { Id = 4, Name = "Conceptual - Task" },
                        new { Id = 5, Name = "Conceptual - Process" },
                        new { Id = 6, Name = "Conceptual - Self-regulating" }
                    );
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Institutions");

                    b.HasData(
                        new { Id = 1, Name = "Oregon Institute of Technology" },
                        new { Id = 2, Name = "North Dakota State University" }
                    );
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.InstructorAssignment", b =>
                {
                    b.Property<int>("InstructorAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationUserId");

                    b.Property<int>("AssignmentId");

                    b.Property<string>("InstructorId");

                    b.HasKey("InstructorAssignmentId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("InstructorId");

                    b.ToTable("InstructorAssignment");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.InstructorCourse", b =>
                {
                    b.Property<int>("InstructorCourseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<string>("InstructorId")
                        .IsRequired();

                    b.HasKey("InstructorCourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorId");

                    b.ToTable("InstructorCourses");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.InstructorTestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EquivalenceClass");

                    b.Property<int?>("FeedbackId");

                    b.Property<bool>("Passed");

                    b.Property<int>("TestCaseStatusId");

                    b.Property<string>("TestName");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("TestCaseStatusId");

                    b.ToTable("StudentTestResults");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new { Id = 1, Name = "Python" },
                        new { Id = 2, Name = "Java" }
                    );
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.MarkovModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignmentId");

                    b.Property<bool>("Finished");

                    b.Property<DateTime>("Publish");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.ToTable("MarkovModels");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.MarkovModelSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MarkovModelStateId");

                    b.Property<int>("SnapshotId");

                    b.HasKey("Id");

                    b.HasIndex("MarkovModelStateId");

                    b.ToTable("MarkovModelSnapshot");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.MarkovModelState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MarkovModelId");

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.HasIndex("MarkovModelId");

                    b.ToTable("MarkovModelStates");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.MarkovModelTransition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MarkovModelStateId");

                    b.Property<double>("Probability");

                    b.Property<int>("To");

                    b.HasKey("Id");

                    b.HasIndex("MarkovModelStateId");

                    b.ToTable("MarkovModelTransitions");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.MethodCoverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchesCovered");

                    b.Property<int>("BranchesMissed");

                    b.Property<int?>("ClassCoverageId");

                    b.Property<int>("ConditionsCovered");

                    b.Property<int>("ConditionsMissed");

                    b.Property<int>("LinesCovered");

                    b.Property<int>("LinesMissed");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ClassCoverageId");

                    b.ToTable("MethodCoverage");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.MethodDeclaration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssignmentSolutionId");

                    b.Property<string>("AstMethodParameterRegexExpression")
                        .IsRequired();

                    b.Property<string>("AstMethodRegexExpression")
                        .IsRequired();

                    b.Property<string>("AstType")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("PreAssignmentMissingMethodsFailureReportId");

                    b.Property<string>("PreprocessorDirective")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AssignmentSolutionId");

                    b.HasIndex("PreAssignmentMissingMethodsFailureReportId");

                    b.ToTable("MethodDeclarations");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.PreAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignmentSolutionId");

                    b.Property<int>("CourseClassId");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("PreAssignmentReportId");

                    b.Property<int>("TestProjectId");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentSolutionId");

                    b.HasIndex("CourseClassId");

                    b.HasIndex("PreAssignmentReportId");

                    b.HasIndex("TestProjectId");

                    b.ToTable("PreAssignments");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.PreAssignmentReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("PreAssignmentReport");

                    b.HasDiscriminator<int>("Type");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.ReferenceSolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("FileBytes")
                        .IsRequired();

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ReferenceSolutions");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.ReferenceTestCasesSolutions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("FileBytes")
                        .IsRequired();

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ReferenceTestCasesSolutions");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.Snapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignmentId");

                    b.Property<int>("SnapshotReportId");

                    b.Property<int>("SnapshotSubmissionId");

                    b.Property<string>("StudentId")
                        .IsRequired();

                    b.Property<string>("SurveyId");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("SnapshotReportId");

                    b.HasIndex("SnapshotSubmissionId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Snapshots");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.SnapshotMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CodeAnalysisMetricId");

                    b.Property<bool>("Declared");

                    b.Property<int>("MethodDeclarationId");

                    b.Property<int?>("SnapshotSuccessReportId");

                    b.HasKey("Id");

                    b.HasIndex("CodeAnalysisMetricId");

                    b.HasIndex("MethodDeclarationId");

                    b.HasIndex("SnapshotSuccessReportId");

                    b.ToTable("SnapshotMethods");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.SnapshotReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("SnapshotReport");

                    b.HasDiscriminator<int>("Type");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.SnapshotSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime");

                    b.Property<byte[]>("Files")
                        .IsRequired();

                    b.Property<string>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("SnapshotSubmission");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.StudentAssignment", b =>
                {
                    b.Property<int>("StudentAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationUserId");

                    b.Property<int>("AssignmentId");

                    b.Property<string>("StudentId");

                    b.HasKey("StudentAssignmentId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAssignment");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.StudentCourse", b =>
                {
                    b.Property<int>("StudentCourseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<string>("StudentId")
                        .IsRequired();

                    b.HasKey("StudentCourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.StudentCourseClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseClassId");

                    b.Property<string>("StudentId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CourseClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourseClasses");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.StudentTestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("InstructorTestResultId");

                    b.Property<bool>("Pass");

                    b.Property<int>("TestCaseStatusId");

                    b.Property<string>("TestName");

                    b.HasKey("Id");

                    b.HasIndex("InstructorTestResultId");

                    b.HasIndex("TestCaseStatusId");

                    b.ToTable("InstructorTestResults");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationMode");

                    b.Property<int>("AssignmentId");

                    b.Property<int?>("FeedbackId");

                    b.Property<string>("Notes");

                    b.Property<DateTime>("SubmissionDateTime");

                    b.Property<string>("SubmitterId");

                    b.Property<byte[]>("SubmitterSolution");

                    b.Property<byte[]>("SubmitterTestCaseSolution");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("FeedbackId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.Survey", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsCompleted");

                    b.Property<DateTime>("PostedTime");

                    b.Property<string>("StudentId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.SurveyAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("SurveyAnswer");

                    b.HasDiscriminator<int>("Type");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.SurveyQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseClassId");

                    b.Property<bool>("Required");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CourseClassId");

                    b.ToTable("SurveyQuestion");

                    b.HasDiscriminator<int>("Type");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.SurveyResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SurveyAnswerId");

                    b.Property<string>("SurveyId");

                    b.Property<int>("SurveyQuestionId");

                    b.HasKey("Id");

                    b.HasIndex("SurveyAnswerId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("SurveyQuestionId");

                    b.ToTable("SurveyResponses");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.Term", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.Property<int>("InstitutionId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Terms");

                    b.HasData(
                        new { Id = 1, DateFrom = new DateTime(2019, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), DateTo = new DateTime(2019, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), InstitutionId = 1, Name = "Spring 2019" },
                        new { Id = 2, DateFrom = new DateTime(2019, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), DateTo = new DateTime(2019, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), InstitutionId = 1, Name = "Summer 2019" }
                    );
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.TestCaseStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TestCaseStatuses");

                    b.HasData(
                        new { Id = 1, Description = "Test case matches a reference test case", Name = "Covered" },
                        new { Id = 2, Description = "Test case is redundant", Name = "Redundant" },
                        new { Id = 3, Description = "A reference test case was not covered", Name = "Uncovered" },
                        new { Id = 4, Description = "A reference test case has failed", Name = "Failed" }
                    );
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.TestConcept", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConceptualContent")
                        .IsRequired();

                    b.Property<string>("DetailedContent");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TestConcepts");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.TestingTypeOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsChecked");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TestingTypeOptions");

                    b.HasData(
                        new { Id = 1, IsChecked = true, Name = "Black Box" },
                        new { Id = 2, IsChecked = false, Name = "White Box" }
                    );
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.TestProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Files");

                    b.Property<string>("TestDllFile")
                        .IsRequired();

                    b.Property<string>("TestFolder")
                        .IsRequired();

                    b.Property<string>("TestProjectFile")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TestProjects");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.TestResultConcept", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InstructorTestResultId");

                    b.Property<int>("TestConceptId");

                    b.HasKey("Id");

                    b.HasIndex("InstructorTestResultId");

                    b.HasIndex("TestConceptId");

                    b.ToTable("TestResultConcepts");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.UnitTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("PreAssignmentFailTestsFailureReportId");

                    b.Property<int?>("TestProjectId");

                    b.HasKey("Id");

                    b.HasIndex("PreAssignmentFailTestsFailureReportId");

                    b.HasIndex("TestProjectId");

                    b.ToTable("UnitTests");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.UnitTestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Passed");

                    b.Property<int?>("SnapshotSuccessReportId");

                    b.Property<int>("UnitTestId");

                    b.HasKey("Id");

                    b.HasIndex("SnapshotSuccessReportId");

                    b.HasIndex("UnitTestId");

                    b.ToTable("UnitTestResults");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.PreAssignmentBadTestFolderReport", b =>
                {
                    b.HasBaseType("TestingTutor.Dev.Data.Models.PreAssignmentReport");


                    b.ToTable("PreAssignmentBadTestFolderReport");

                    b.HasDiscriminator().HasValue(8);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.PreAssignmentBuildFailureReport", b =>
                {
                    b.HasBaseType("TestingTutor.Dev.Data.Models.PreAssignmentReport");

                    b.Property<string>("Report")
                        .IsRequired();

                    b.ToTable("PreAssignmentBuildFailureReport");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.PreAssignmentCompileFailureReport", b =>
                {
                    b.HasBaseType("TestingTutor.Dev.Data.Models.PreAssignmentReport");

                    b.Property<string>("Report")
                        .IsRequired()
                        .HasColumnName("PreAssignmentCompileFailureReport_Report");

                    b.ToTable("PreAssignmentCompileFailureReport");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.PreAssignmentFailTestsFailureReport", b =>
                {
                    b.HasBaseType("TestingTutor.Dev.Data.Models.PreAssignmentReport");


                    b.ToTable("PreAssignmentFailTestsFailureReport");

                    b.HasDiscriminator().HasValue(7);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.PreAssignmentMissingMethodsFailureReport", b =>
                {
                    b.HasBaseType("TestingTutor.Dev.Data.Models.PreAssignmentReport");


                    b.ToTable("PreAssignmentMissingMethodsFailureReport");

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.PreAssignmentNoClassFailureReport", b =>
                {
                    b.HasBaseType("TestingTutor.Dev.Data.Models.PreAssignmentReport");


                    b.ToTable("PreAssignmentNoClassFailureReport");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.PreAssignmentNoFileFailureReport", b =>
                {
                    b.HasBaseType("TestingTutor.Dev.Data.Models.PreAssignmentReport");


                    b.ToTable("PreAssignmentNoFileFailureReport");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.PreAssignmentPendingReport", b =>
                {
                    b.HasBaseType("TestingTutor.Dev.Data.Models.PreAssignmentReport");


                    b.ToTable("PreAssignmentPendingReport");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.PreAssignmentSucessReport", b =>
                {
                    b.HasBaseType("TestingTutor.Dev.Data.Models.PreAssignmentReport");


                    b.ToTable("PreAssignmentSucessReport");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.SnapshotFailureReport", b =>
                {
                    b.HasBaseType("TestingTutor.Dev.Data.Models.SnapshotReport");

                    b.Property<string>("Report")
                        .IsRequired();

                    b.ToTable("SnapshotFailureReport");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.SnapshotSuccessReport", b =>
                {
                    b.HasBaseType("TestingTutor.Dev.Data.Models.SnapshotReport");


                    b.ToTable("SnapshotSuccessReport");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.SurveyAnswerQualitative", b =>
                {
                    b.HasBaseType("TestingTutor.Dev.Data.Models.SurveyAnswer");

                    b.Property<string>("Response");

                    b.ToTable("SurveyAnswerQualitative");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.SurveyAnswerRate", b =>
                {
                    b.HasBaseType("TestingTutor.Dev.Data.Models.SurveyAnswer");

                    b.Property<int>("Selection");

                    b.ToTable("SurveyAnswerRate");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.SurveyQuestionQualitative", b =>
                {
                    b.HasBaseType("TestingTutor.Dev.Data.Models.SurveyQuestion");

                    b.Property<string>("Prompt")
                        .IsRequired();

                    b.ToTable("SurveyQuestionQualitative");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.SurveyQuestionRate", b =>
                {
                    b.HasBaseType("TestingTutor.Dev.Data.Models.SurveyQuestion");

                    b.Property<string>("Category")
                        .IsRequired();

                    b.Property<string>("Example")
                        .IsRequired();

                    b.Property<string>("Explaination")
                        .IsRequired();

                    b.Property<int>("Range");

                    b.ToTable("SurveyQuestionRate");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.Institution", "Institution")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.Assignment", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.AssignmentSpecification", "AssignmentSpecification")
                        .WithMany()
                        .HasForeignKey("AssignmentSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.AssignmentVisibilityProtectionLevel", "AssignmentVisibilityProtectionLevel")
                        .WithMany()
                        .HasForeignKey("AssignmentVisibilityProtectionLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("TestingTutor.Dev.Data.Models.Difficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId");

                    b.HasOne("TestingTutor.Dev.Data.Models.FeedbackLevelOption", "FeedbackLevelOption")
                        .WithMany()
                        .HasForeignKey("FeedbackLevelOptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.Institution", "Institution")
                        .WithMany("Assignments")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.ReferenceSolution", "ReferenceSolution")
                        .WithMany()
                        .HasForeignKey("ReferenceSolutionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.ReferenceTestCasesSolutions", "ReferenceTestCasesSolutions")
                        .WithMany()
                        .HasForeignKey("ReferenceTestCasesSolutionsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.TestingTypeOption", "TestingTypeOption")
                        .WithMany()
                        .HasForeignKey("TestingTypeOptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.AssignmentApplicationMode", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.ApplicationMode", "ApplicationMode")
                        .WithMany("AssignmentApplicationModes")
                        .HasForeignKey("ApplicationModeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.Assignment", "Assignment")
                        .WithMany("AssignmentApplicationModes")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.AssignmentCoverageTypeOption", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.Assignment", "Assignment")
                        .WithMany("AssignmentCoverageTypeOptions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.CoverageTypeOption", "CoverageTypeOption")
                        .WithMany("AssignmentCoverageTypeOptions")
                        .HasForeignKey("CoverageTypeOptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.AssignmentTag", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.Assignment", "Assignment")
                        .WithMany("Tags")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.ClassCoverage", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.Feedback")
                        .WithMany("ClassCoverages")
                        .HasForeignKey("FeedbackId");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.CodeAnalysisMetric", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.AbstractSyntaxTreeMetric", "AbstractSyntaxTreeMetric")
                        .WithMany()
                        .HasForeignKey("AbstractSyntaxTreeMetricId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.BagOfWordsMetric", "BagOfWordsMetric")
                        .WithMany()
                        .HasForeignKey("BagOfWordsMetricId");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.Course", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.Institution", "Institution")
                        .WithMany("Courses")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.Term", "Term")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.DevAssignment", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.AssignmentSolution", "Solution")
                        .WithMany()
                        .HasForeignKey("AssignmentSolutionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.CourseClass", "CourseClass")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.Feedback", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.EngineException", "EngineException")
                        .WithMany()
                        .HasForeignKey("EngineExceptionId");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.InstructorAssignment", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.Assignment", "Assignment")
                        .WithMany("Instructors")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.ApplicationUser", "Instructor")
                        .WithMany("InstructorAssignments")
                        .HasForeignKey("InstructorId");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.InstructorCourse", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.Course", "Course")
                        .WithMany("Instructors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.ApplicationUser", "Instructor")
                        .WithMany("InstructorCourses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.InstructorTestResult", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.Feedback")
                        .WithMany("InstructorTestResults")
                        .HasForeignKey("FeedbackId");

                    b.HasOne("TestingTutor.Dev.Data.Models.TestCaseStatus", "TestCaseStatus")
                        .WithMany()
                        .HasForeignKey("TestCaseStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.MarkovModel", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.DevAssignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.MarkovModelSnapshot", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.MarkovModelState")
                        .WithMany("Snapshots")
                        .HasForeignKey("MarkovModelStateId");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.MarkovModelState", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.MarkovModel")
                        .WithMany("States")
                        .HasForeignKey("MarkovModelId");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.MarkovModelTransition", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.MarkovModelState")
                        .WithMany("Transitions")
                        .HasForeignKey("MarkovModelStateId");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.MethodCoverage", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.ClassCoverage")
                        .WithMany("MethodCoverages")
                        .HasForeignKey("ClassCoverageId");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.MethodDeclaration", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.AssignmentSolution")
                        .WithMany("MethodDeclarations")
                        .HasForeignKey("AssignmentSolutionId");

                    b.HasOne("TestingTutor.Dev.Data.Models.PreAssignmentMissingMethodsFailureReport")
                        .WithMany("MissingMethodDeclarations")
                        .HasForeignKey("PreAssignmentMissingMethodsFailureReportId");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.PreAssignment", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.AssignmentSolution", "Solution")
                        .WithMany()
                        .HasForeignKey("AssignmentSolutionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.CourseClass", "CourseClass")
                        .WithMany("PreAssignments")
                        .HasForeignKey("CourseClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.PreAssignmentReport", "PreAssignmentReport")
                        .WithMany()
                        .HasForeignKey("PreAssignmentReportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.Snapshot", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.DevAssignment", "Assignment")
                        .WithMany("Snapshots")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.SnapshotReport", "Report")
                        .WithMany()
                        .HasForeignKey("SnapshotReportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.SnapshotSubmission", "SnapshotSubmission")
                        .WithMany()
                        .HasForeignKey("SnapshotSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.Student", "Student")
                        .WithMany("Snapshots")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.Survey", "Survey")
                        .WithMany("Snapshots")
                        .HasForeignKey("SurveyId");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.SnapshotMethod", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.CodeAnalysisMetric", "CodeAnalysisMetric")
                        .WithMany()
                        .HasForeignKey("CodeAnalysisMetricId");

                    b.HasOne("TestingTutor.Dev.Data.Models.MethodDeclaration", "MethodDeclaration")
                        .WithMany()
                        .HasForeignKey("MethodDeclarationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.SnapshotSuccessReport")
                        .WithMany("SnapshotMethods")
                        .HasForeignKey("SnapshotSuccessReportId");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.SnapshotSubmission", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.Student", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.StudentAssignment", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.Assignment", "Assignment")
                        .WithMany("Students")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.ApplicationUser", "Student")
                        .WithMany("StudentAssignments")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.StudentCourse", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.ApplicationUser", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.StudentCourseClass", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.CourseClass", "Class")
                        .WithMany("StudentCourseClasses")
                        .HasForeignKey("CourseClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.Student", "Student")
                        .WithMany("StudentCourseClasses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.StudentTestResult", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.InstructorTestResult")
                        .WithMany("StudentTestResults")
                        .HasForeignKey("InstructorTestResultId");

                    b.HasOne("TestingTutor.Dev.Data.Models.TestCaseStatus", "TestCaseStatus")
                        .WithMany()
                        .HasForeignKey("TestCaseStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.Submission", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.Feedback", "Feedback")
                        .WithMany()
                        .HasForeignKey("FeedbackId");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.Survey", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.Student", "Student")
                        .WithMany("Surveys")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.SurveyQuestion", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.CourseClass", "CourseClass")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("CourseClassId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.SurveyResponse", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.SurveyAnswer", "Answer")
                        .WithMany()
                        .HasForeignKey("SurveyAnswerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.Survey")
                        .WithMany("SurveyResponses")
                        .HasForeignKey("SurveyId");

                    b.HasOne("TestingTutor.Dev.Data.Models.SurveyQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("SurveyQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.Term", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.TestResultConcept", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.InstructorTestResult", "InstructorTestResult")
                        .WithMany("TestResultConcepts")
                        .HasForeignKey("InstructorTestResultId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestingTutor.Dev.Data.Models.TestConcept", "TestConcept")
                        .WithMany("TestResultConcepts")
                        .HasForeignKey("TestConceptId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.UnitTest", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.PreAssignmentFailTestsFailureReport")
                        .WithMany("FailUnitTests")
                        .HasForeignKey("PreAssignmentFailTestsFailureReportId");

                    b.HasOne("TestingTutor.Dev.Data.Models.TestProject")
                        .WithMany("UnitTests")
                        .HasForeignKey("TestProjectId");
                });

            modelBuilder.Entity("TestingTutor.Dev.Data.Models.UnitTestResult", b =>
                {
                    b.HasOne("TestingTutor.Dev.Data.Models.SnapshotSuccessReport")
                        .WithMany("UnitTestResults")
                        .HasForeignKey("SnapshotSuccessReportId");

                    b.HasOne("TestingTutor.Dev.Data.Models.UnitTest", "UnitTest")
                        .WithMany()
                        .HasForeignKey("UnitTestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
